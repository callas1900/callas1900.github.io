<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Android on callas1900.net</title>
    <link>/tags/android/</link>
    <description>Recent content in Android on callas1900.net</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright 2005-2022 callas1900.net All rights reserved.</copyright>
    <lastBuildDate>Thu, 10 Nov 2016 02:06:00 +0900</lastBuildDate><atom:link href="/tags/android/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Smaller APKs : Android におけるAPKを小さく保つためのテクニック</title>
      <link>/posts/2016/11/10/smaller-apks-android-%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8Bapk%E3%82%92%E5%B0%8F%E3%81%95%E3%81%8F%E4%BF%9D%E3%81%A4%E3%81%9F%E3%82%81%E3%81%AE%E3%83%86%E3%82%AF%E3%83%8B%E3%83%83%E3%82%AF/</link>
      <pubDate>Thu, 10 Nov 2016 02:06:00 +0900</pubDate>
      
      <guid>/posts/2016/11/10/smaller-apks-android-%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8Bapk%E3%82%92%E5%B0%8F%E3%81%95%E3%81%8F%E4%BF%9D%E3%81%A4%E3%81%9F%E3%82%81%E3%81%AE%E3%83%86%E3%82%AF%E3%83%8B%E3%83%83%E3%82%AF/</guid>
      <description>Android Performance Patterns Session にいい動画が上がっていたので、備忘録として中身を書き出しておく
Removing Unused Resources Multi Resources Support Vector Drawables Reuse Existing Resources Removing Unused Code Apk Analyzer Removing Unused Resources gradle file にて以下の minifyEnabled と shrinkResources をセットしておく。
android { ... buildTypes { release { minifyEnabled true shrinkResources true proguardFiles getDefaultProguardFile(&amp;#39;proguard-android.txt&amp;#39;), &amp;#39;proguard-rules.pro&amp;#39; } } } これらはアプリ内で使用していないリソースを除去してくれます。
Multi Resources Support Android がサポートしているリソースサイズを全て揃えるとそれだけで結構な量になるので、必要なものだけ使う。
ldpi
mdpi から自動で作られる
mdpi
tvdpi
使わない
hdpi
xxhdpi から自動で作られる
xhdpi
xxhdpi から自動で作られる
xxhdpi
xxxhdpi
mdpi xxhdpi xxxhdpi のみ使用する</description>
    </item>
    
    <item>
      <title>Android 5.0.2 以上でBLEが動かない</title>
      <link>/posts/2016/02/03/android-5.0.2-%E4%BB%A5%E4%B8%8A%E3%81%A7ble%E3%81%8C%E5%8B%95%E3%81%8B%E3%81%AA%E3%81%84/</link>
      <pubDate>Wed, 03 Feb 2016 22:48:00 +0900</pubDate>
      
      <guid>/posts/2016/02/03/android-5.0.2-%E4%BB%A5%E4%B8%8A%E3%81%A7ble%E3%81%8C%E5%8B%95%E3%81%8B%E3%81%AA%E3%81%84/</guid>
      <description>Occurrence -事象- Causes -原因- HID とは ? BLUETOOTH_PRIVILEGED とは? Summary -まとめ- HID を使ってるかの判断 禁止された Characteristic UUID なぜ禁止されたのか？ Occurrence -事象- 機材とAndroid を BLE (Bluetooth low energy) で繋ごうとしたところ、Android 5.0.2以上の端末で Security Exception が発生した。
5.0.1 や 4.2 などは問題ないが、5.1や6.0で発生する。
エラー内容は以下のようになっている。
java.lang.SecurityException: Need BLUETOOTH_PRIVILEGED permission: Neither user 99999 nor current process has android.permission.BLUETOOTH_PRIVILEGED. 発生箇所は BluetoothGatt#setCharacteristicNotification
Causes -原因- StackOverflow にほぼ発生事例そのままの報告がある、
Android 5.0.2 onwards don’t allow HID access through Bluetooth LE
さらに、Android Issues に [BLE] Reading/writing char/descr of a HID service throws an exception があり、その中で</description>
    </item>
    
    <item>
      <title>JB_MR2(4.3)とKitKat(4.4)のPermission比較（メーカー署名関係）</title>
      <link>/posts/2013/11/01/jb_mr24.3%E3%81%A8kitkat4.4%E3%81%AEpermission%E6%AF%94%E8%BC%83%E3%83%A1%E3%83%BC%E3%82%AB%E3%83%BC%E7%BD%B2%E5%90%8D%E9%96%A2%E4%BF%82/</link>
      <pubDate>Fri, 01 Nov 2013 14:59:00 +0900</pubDate>
      
      <guid>/posts/2013/11/01/jb_mr24.3%E3%81%A8kitkat4.4%E3%81%AEpermission%E6%AF%94%E8%BC%83%E3%83%A1%E3%83%BC%E3%82%AB%E3%83%BC%E7%BD%B2%E5%90%8D%E9%96%A2%E4%BF%82/</guid>
      <description>Android 4.3 (JELLY_BEAN_MR2) が出て結構時間がたちました、恒例のsignatureがらみのPermission比較やらなきゃーと思って放置してたら4.4(Kitkat)が出ちゃったので慌てて更新します。
前回までのPermission比較は
ICSとGingerbreadのPermission比較（メーカー署名関係） JBとICSのPermission比較（メーカー署名関係） JB(4.1)とJB_MR1(4.2)のPermission比較（メーカー署名関係） JB_MR1(4.2)とJB_MR2(4.3)のPermission比較（メーカー署名関係） にあります。
何調べてるの？ 本記事は署名関係の Android Permission に注目してバージョン間の差分を比較しています。
これらの Permission が要求されるAPIに関してはOSビルド時の署名が必要になります。
メーカー端末であれば販売メーカーに依頼を出して署名をしてもらう必要がありますが、
通常出来ません。
よって3rdパーティアプリを作成する場合これらの Permission を要求されるAPIは使用不可能になります。
Androidはバージョンアップを重ねる毎にこれら Permission の締め付けがきつくなってるのでバージョンアップ毎にチェックしています。
JB MR2 と KitKatのプロテクションレベルの一覧比較 JB MR2
dangerous signature|system normal signature signature|system|development system|signature signatureOrSystem KitKat
dangerous signature|system normal signature signature|system|development system|signature signatureOrSystem 特に変更なし
Permission増減調査(JB MR1(4.2) &amp;gt; JB MR2(4.3)) [signature] これはメーカー署名がないと使用出来ないもの
android.permission.BLUETOOTH_STACK
android.permission.ACCOUNT_MANAGER
android.permission.HARDWARE_TEST
android.permission.NET_ADMIN
android.permission.REMOTE_AUDIO_PLAYBACK
android.permission.INTERACT_ACROSS_USERS_FULL
android.permission.GET_DETAILED_TASKS
android.permission.REMOVE_TASKS
+ android.permission.MANAGE_ACTIVITY_STACKS
android.permission.START_ANY_ACTIVITY
android.permission.SET_SCREEN_COMPATIBILITY
android.permission.ACCESS_ALL_EXTERNAL_STORAGE
android.permission.FORCE_STOP_PACKAGES
android.permission.SET_PREFERRED_APPLICATIONS</description>
    </item>
    
    <item>
      <title>JB_MR1(4.2)とJB_MR2(4.3)のPermission比較（メーカー署名関係）</title>
      <link>/posts/2013/11/01/jb_mr14.2%E3%81%A8jb_mr24.3%E3%81%AEpermission%E6%AF%94%E8%BC%83%E3%83%A1%E3%83%BC%E3%82%AB%E3%83%BC%E7%BD%B2%E5%90%8D%E9%96%A2%E4%BF%82/</link>
      <pubDate>Fri, 01 Nov 2013 12:40:00 +0900</pubDate>
      
      <guid>/posts/2013/11/01/jb_mr14.2%E3%81%A8jb_mr24.3%E3%81%AEpermission%E6%AF%94%E8%BC%83%E3%83%A1%E3%83%BC%E3%82%AB%E3%83%BC%E7%BD%B2%E5%90%8D%E9%96%A2%E4%BF%82/</guid>
      <description>Android 4.3 (JELLY_BEAN_MR2) が出て結構時間がたちました、恒例のsignatureがらみのPermission比較やらなきゃーと思って放置してたら4.4(Kitkat)が出ちゃったので慌てて更新します。
前回までのPermission比較は
ICSとGingerbreadのPermission比較（メーカー署名関係） JBとICSのPermission比較（メーカー署名関係） JB(4.1)とJB_MR1(4.2)のPermission比較（メーカー署名関係） にあります。
何調べてるの？ 本記事は署名関係の Android Permission に注目してバージョン間の差分を比較しています。
これらの Permission が要求されるAPIに関してはOSビルド時の署名が必要になります。
メーカー端末であれば販売メーカーに依頼を出して署名をしてもらう必要がありますが、
通常出来ません。
よって3rdパーティアプリを作成する場合これらの Permission を要求されるAPIは使用不可能になります。
Androidはバージョンアップを重ねる毎にこれら Permission の締め付けがきつくなってるのでバージョンアップ毎にチェックしています。
JB MR1 と JB MR2 のプロテクションレベルの一覧比較 JB MR1
dangerous signature|system normal signature signature|system|development system|signature signatureOrSystem JB MR2
dangerous signature|system normal signature signature|system|development system|signature signatureOrSystem 特に変更はありませんね。
Permission増減調査(JB MR1(4.2) &amp;gt; JB MR2(4.3)) [signature] これはメーカー署名がないと使用出来ないもの
android.permission.BLUETOOTH_STACK
android.permission.ACCOUNT_MANAGER
android.permission.HARDWARE_TEST
android.permission.NET_ADMIN
android.permission.REMOTE_AUDIO_PLAYBACK
android.permission.INTERACT_ACROSS_USERS_FULL
android.permission.GET_DETAILED_TASKS
android.permission.REMOVE_TASKS
android.permission.START_ANY_ACTIVITY
android.permission.SET_SCREEN_COMPATIBILITY
android.permission.ACCESS_ALL_EXTERNAL_STORAGE
android.permission.FORCE_STOP_PACKAGES
android.permission.SET_PREFERRED_APPLICATIONS</description>
    </item>
    
    <item>
      <title>Xperia Z tablet の初期化（no Companion)</title>
      <link>/posts/2013/09/04/xperia-z-tablet-%E3%81%AE%E5%88%9D%E6%9C%9F%E5%8C%96no-companion/</link>
      <pubDate>Wed, 04 Sep 2013 18:56:00 +0900</pubDate>
      
      <guid>/posts/2013/09/04/xperia-z-tablet-%E3%81%AE%E5%88%9D%E6%9C%9F%E5%8C%96no-companion/</guid>
      <description>でない 匿名 - Aug 1, 2016
でない
SONYロゴが出たらボリュームキーの下を押しぱなしみたいだが、未確認</description>
    </item>
    
    <item>
      <title>Xperia Z tablet の初期化（no Companion)</title>
      <link>/posts/2013/09/04/xperia-z-tablet-%E3%81%AE%E5%88%9D%E6%9C%9F%E5%8C%96no-companion/</link>
      <pubDate>Wed, 04 Sep 2013 18:56:00 +0900</pubDate>
      
      <guid>/posts/2013/09/04/xperia-z-tablet-%E3%81%AE%E5%88%9D%E6%9C%9F%E5%8C%96no-companion/</guid>
      <description>ロックパスワードが不明な状態の Xperia Z tablet を初期化で救う方法をネットで検索したらCompanionを使う方法ばかりだったので、 macの人が困るのでハードキーのみを使用したリセット方法を見つけたのでメモ。 電源落とす ボリュームキーの下を押しながら電源ボタン長押しで再起動 初期化画面が出てくる </description>
    </item>
    
    <item>
      <title>JB(4.1)とJB_MR1(4.2)のPermission比較（メーカー署名関係）</title>
      <link>/posts/2012/12/12/jb4.1%E3%81%A8jb_mr14.2%E3%81%AEpermission%E6%AF%94%E8%BC%83%E3%83%A1%E3%83%BC%E3%82%AB%E3%83%BC%E7%BD%B2%E5%90%8D%E9%96%A2%E4%BF%82/</link>
      <pubDate>Wed, 12 Dec 2012 00:30:00 +0900</pubDate>
      
      <guid>/posts/2012/12/12/jb4.1%E3%81%A8jb_mr14.2%E3%81%AEpermission%E6%AF%94%E8%BC%83%E3%83%A1%E3%83%BC%E3%82%AB%E3%83%BC%E7%BD%B2%E5%90%8D%E9%96%A2%E4%BF%82/</guid>
      <description>大変勉強になりました。ありがとうございます(^-^)/ 匿名 - Feb 5, 2013
大変勉強になりました。ありがとうございます(^-^)/</description>
    </item>
    
    <item>
      <title>JB(4.1)とJB_MR1(4.2)のPermission比較（メーカー署名関係）</title>
      <link>/posts/2012/12/12/jb4.1%E3%81%A8jb_mr14.2%E3%81%AEpermission%E6%AF%94%E8%BC%83%E3%83%A1%E3%83%BC%E3%82%AB%E3%83%BC%E7%BD%B2%E5%90%8D%E9%96%A2%E4%BF%82/</link>
      <pubDate>Wed, 12 Dec 2012 00:30:00 +0900</pubDate>
      
      <guid>/posts/2012/12/12/jb4.1%E3%81%A8jb_mr14.2%E3%81%AEpermission%E6%AF%94%E8%BC%83%E3%83%A1%E3%83%BC%E3%82%AB%E3%83%BC%E7%BD%B2%E5%90%8D%E9%96%A2%E4%BF%82/</guid>
      <description>Android 4.2 (JELLY_BEAN_MR1) が出ましたので、恒例のsignatureがらみのPermission比較したいと思います。
前回までのPermission比較は
ICSとGingerbreadのPermission比較（メーカー署名関係） JBとICSのPermission比較（メーカー署名関係） にあります。
何調べてるの？ 本記事は署名関係の Android Permission に注目してバージョン間の差分を比較しています。
これらの Permission が要求されるAPIに関してはOSビルド時の署名が必要になります。
メーカー端末であれば販売メーカーに依頼を出して署名をしてもらう必要がありますが、
通常出来ません。
よって3rdパーティアプリを作成する場合これらの Permission を要求されるAPIは使用不可能になります。
Androidはバージョンアップを重ねる毎にこれら Permission の締め付けがきつくなってるのでバージョンアップ毎にチェックしています。
JB と JB MR1 のプロテクションレベルの一覧比較 JB
dangerous signature|system normal signature signature|system|development signatureOrSystem JB MR1
dangerous signature|system normal signature signature|system|development system|signature signatureOrSystem 増えた？と思ったらパイプラインで区切られたフラグの順番が逆転していただけでした。
これは signature|system と同一ですね。
しかし signatureOrSystem の件といい、段々適当になってきてる気がする。
Permission増減調査(JB(4.1) &amp;gt; JB MR1(4.2)) [signature] これはメーカー署名がないと使用出来ないもの
+ android.permission.BLUETOOTH_STACK
android.permission.ACCOUNT_MANAGER
android.permission.HARDWARE_TEST
android.permission.NET_ADMIN
android.permission.REMOTE_AUDIO_PLAYBACK
+ android.permission.INTERACT_ACROSS_USERS_FULL
android.permission.GET_DETAILED_TASKS
android.permission.REMOVE_TASKS
android.permission.START_ANY_ACTIVITY
android.permission.SET_SCREEN_COMPATIBILITY</description>
    </item>
    
    <item>
      <title>Androidで共通鍵暗号化でつまづいたので記録に残す</title>
      <link>/posts/2012/10/01/android%E3%81%A7%E5%85%B1%E9%80%9A%E9%8D%B5%E6%9A%97%E5%8F%B7%E5%8C%96%E3%81%A7%E3%81%A4%E3%81%BE%E3%81%A5%E3%81%84%E3%81%9F%E3%81%AE%E3%81%A7%E8%A8%98%E9%8C%B2%E3%81%AB%E6%AE%8B%E3%81%99/</link>
      <pubDate>Mon, 01 Oct 2012 09:00:00 +0900</pubDate>
      
      <guid>/posts/2012/10/01/android%E3%81%A7%E5%85%B1%E9%80%9A%E9%8D%B5%E6%9A%97%E5%8F%B7%E5%8C%96%E3%81%A7%E3%81%A4%E3%81%BE%E3%81%A5%E3%81%84%E3%81%9F%E3%81%AE%E3%81%A7%E8%A8%98%E9%8C%B2%E3%81%AB%E6%AE%8B%E3%81%99/</guid>
      <description>Androidで文字列をセキュアに保存したい場合、
暗号化してsqliteに保存するのがよろしいと思われる。
ここではAndroid自体のセキュリティがアレだとか、Rooted端末とapktoolがあればアレをこうしてアレ出来るだとかいう話はとりあえず置いとく。
まず以下のようなソースを書いた。
内容は、
共通鍵の秘密鍵を生成している箇所のみ抽出。 DBに鍵が保存されていない初回はif文を迂回して生成ロジックで生成後DBに保存。 DB保存後はDBから復元する。 private final static String ARGOLISM = &amp;#34;PBEWithSHA1And256BitAES-CBC-BC&amp;#34;; private SecretKey getSecretKey() throws NoSuchAlgorithmException, InvalidKeySpecException, NameNotFoundException { // check saved secret key is exist. byte\[\] savedSecretKey = DBHelper.readByteData(context, &amp;#34;hoge&amp;#34;); if(savedSecretKey != null &amp;amp;&amp;amp; savedSecretKey.length &amp;gt; 0){ return new SecretKeySpec(savedSecretKey, ARGOLISM); } // generate new secret key. char\[\] pw = generatePassword(); int iteratorCount = 1024; int keySize = 256; int saltLength = 8; byte\[\] salt = &amp;#34;00000000&amp;#34;.</description>
    </item>
    
    <item>
      <title>JBとICSのPermission比較（メーカー署名関係）</title>
      <link>/posts/2012/08/13/jb%E3%81%A8ics%E3%81%AEpermission%E6%AF%94%E8%BC%83%E3%83%A1%E3%83%BC%E3%82%AB%E3%83%BC%E7%BD%B2%E5%90%8D%E9%96%A2%E4%BF%82/</link>
      <pubDate>Mon, 13 Aug 2012 09:00:00 +0900</pubDate>
      
      <guid>/posts/2012/08/13/jb%E3%81%A8ics%E3%81%AEpermission%E6%AF%94%E8%BC%83%E3%83%A1%E3%83%BC%E3%82%AB%E3%83%BC%E7%BD%B2%E5%90%8D%E9%96%A2%E4%BF%82/</guid>
      <description>以前書いた、ICSとGingerbreadのPermission比較（メーカー署名関係）の続編。
注意：今回の記事は https://android.googlesource.com/platform/manifest/android-4.1.1_r4 を元に書いてます。
またしてもJBで色々と Permission 関係が変わっているのでまとめてみた。
まず プロテクションレベルの表記が変わっている。
以前は signatureOrSystem と書かれていた箇所が signature|system に変更。
また謎の development も追加（詳細がドキュメントされていないので後日調査予定）
まず ICS と ＪＢ のプロテクションレベルの一覧比較
ICS
dangerous signatureOrSystem normal signature JB
dangerous signature|system normal signature signature|system|development signatureOrSystem JB に signatureOrSystem が混じっているのは誤表記にあらず。
一個だけ何故か（恐らくミスだと思うけど） signatureOrSystem が混ざっている。
次それぞれのプロテクションレベル毎の比較
JB 方式の書き方だと今回はまとめにくいので、ICS方式で signature と signatureOrSystemでまとめてみる。
[signature] 赤字は追加分、新規追加のみ signatureOrSystem からの格上げなし
android.permission.ACCOUNT_MANAGER
android.permission.HARDWARE_TEST
android.permission.NET_ADMIN
android.permission.REMOTE_AUDIO_PLAYBACK
android.permission.GET_DETAILED_TASKS
android.permission.REMOVE_TASKS
android.permission.START_ANY_ACTIVITY
android.permission.SET_SCREEN_COMPATIBILITY
android.permission.FORCE_STOP_PACKAGES
android.permission.SET_PREFERRED_APPLICATIONS
android.permission.ASEC_ACCESS
android.permission.ASEC_CREATE
android.permission.ASEC_DESTROY
android.permission.ASEC_MOUNT_UNMOUNT
android.permission.ASEC_RENAME
android.permission.DIAGNOSTIC
android.permission.STATUS_BAR_SERVICE
android.permission.FORCE_BACK
android.permission.INTERNAL_SYSTEM_WINDOW</description>
    </item>
    
    <item>
      <title>ICSとGingerbreadのPermission比較（メーカー署名関係）</title>
      <link>/posts/2011/11/28/ics%E3%81%A8gingerbread%E3%81%AEpermission%E6%AF%94%E8%BC%83%E3%83%A1%E3%83%BC%E3%82%AB%E3%83%BC%E7%BD%B2%E5%90%8D%E9%96%A2%E4%BF%82/</link>
      <pubDate>Mon, 28 Nov 2011 13:45:00 +0900</pubDate>
      
      <guid>/posts/2011/11/28/ics%E3%81%A8gingerbread%E3%81%AEpermission%E6%AF%94%E8%BC%83%E3%83%A1%E3%83%BC%E3%82%AB%E3%83%BC%E7%BD%B2%E5%90%8D%E9%96%A2%E4%BF%82/</guid>
      <description>ICSのテストをしていると、前まで動いていたところでSecurityExceptionをはきました。
端末不具合かソースが変わったのかを調べる為に
公開されているICS(Android 4.0)とGingerbread(Android 2.3.3)のAndroidManifest.xmlを比較してみました。
AndroidではAndroid自体をビルドする時に使用されている署名（所謂メーカー所有の署名）とその他の署名の間に格差があり、特定のAPIを叩く際に必要となるpermissionの値が、&amp;ldquo;signatureOrSystem&amp;rdquo; もしくは&amp;quot;signature&amp;quot;となっている時は、実行する為にこのメーカー署名が必要となります。
それらAPIを叩くためには、メーカーに依頼して出来たAPKに署名を入れてもらうか、
rootを取る、もしくは自分でAndroidをビルドして実機に焼く等を行う必要があります。
それぞれ、frameworks/base/core/res/AndroidManifest.xml
を比較し、ICSで増えた箇所を赤字＋太字で表示しました。
※ICSで減ったものはなかった。
[signatureOrSystem]
android.permission.SEND_SMS_NO_CONFIRMATION
android.permission.RECEIVE_EMERGENCY_BROADCAST
android.permission.INSTALL_LOCATION_PROVIDER
android.permission.CONNECTIVITY_INTERNAL
android.permission.MANAGE_USB
android.permission.ACCESS_MTP
android.permission.MODIFY_PHONE_STATE
android.permission.READ_PRIVILEGED_PHONE_STATE
android.permission.WRITE_MEDIA_STORAGE
android.permission.WRITE_SECURE_SETTINGS
android.permission.WRITE_GSERVICES
android.permission.DUMP
android.permission.RETRIEVE_WINDOW_CONTENT
android.permission.SET_TIME
android.permission.WRITE_APN_SETTINGS
android.permission.STATUS_BAR
android.permission.UPDATE_DEVICE_STATS
android.permission.SHUTDOWN
android.permission.STOP_APP_SWITCHES
android.permission.BIND_WALLPAPER
android.permission.INSTALL_PACKAGES
android.permission.DELETE_CACHE_FILES
android.permission.DELETE_PACKAGES
android.permission.MOVE_PACKAGE
android.permission.CHANGE_COMPONENT_ENABLED_STATE
android.permission.READ_FRAME_BUFFER
android.permission.REBOOT
android.permission.MASTER_CLEAR
android.permission.CALL_PRIVILEGED
android.permission.PERFORM_CDMA_PROVISIONING
android.permission.CONTROL_LOCATION_UPDATES
android.permission.ACCESS_CHECKIN_PROPERTIES
android.permission.PACKAGE_USAGE_STATS
android.permission.BACKUP
android.permission.BIND_REMOTEVIEWS
android.permission.BIND_APPWIDGET
android.permission.GLOBAL_SEARCH
android.permission.SET_WALLPAPER_COMPONENT
android.permission.ACCESS_CACHE_FILESYSTEM
android.permission.CRYPT_KEEPER
android.permission.READ_NETWORK_USAGE_HISTORY
android.permission.MODIFY_NETWORK_ACCOUNTING
android.permission.PACKAGE_VERIFICATION_AGENT
[signature]
android.permission.ACCOUNT_MANAGER
android.permission.HARDWARE_TEST
android.permission.NET_ADMIN
android.permission.REMOVE_TASKS
android.permission.FORCE_STOP_PACKAGES
android.permission.SET_PREFERRED_APPLICATIONS
android.permission.ASEC_ACCESS
android.permission.ASEC_CREATE
android.permission.ASEC_DESTROY
android.permission.ASEC_MOUNT_UNMOUNT
android.permission.ASEC_RENAME
android.permission.DIAGNOSTIC
android.permission.STATUS_BAR_SERVICE</description>
    </item>
    
  </channel>
</rss>
