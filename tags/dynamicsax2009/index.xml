<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DynamicsAX2009 on callas1900.net</title>
    <link>/tags/dynamicsax2009/</link>
    <description>Recent content in DynamicsAX2009 on callas1900.net</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright 2005-2020 callas1900.net All rights reserved.</copyright>
    <lastBuildDate>Thu, 13 May 2010 21:58:00 +0900</lastBuildDate><atom:link href="/tags/dynamicsax2009/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[DynamicsAX2009]Admin グループの権限が外れた場合の対処方法</title>
      <link>/posts/2010/05/13/dynamicsax2009admin-%E3%82%B0%E3%83%AB%E3%83%BC%E3%83%97%E3%81%AE%E6%A8%A9%E9%99%90%E3%81%8C%E5%A4%96%E3%82%8C%E3%81%9F%E5%A0%B4%E5%90%88%E3%81%AE%E5%AF%BE%E5%87%A6%E6%96%B9%E6%B3%95/</link>
      <pubDate>Thu, 13 May 2010 21:58:00 +0900</pubDate>
      
      <guid>/posts/2010/05/13/dynamicsax2009admin-%E3%82%B0%E3%83%AB%E3%83%BC%E3%83%97%E3%81%AE%E6%A8%A9%E9%99%90%E3%81%8C%E5%A4%96%E3%82%8C%E3%81%9F%E5%A0%B4%E5%90%88%E3%81%AE%E5%AF%BE%E5%87%A6%E6%96%B9%E6%B3%95/</guid>
      <description>DynamicsAxにはデフォルトで管理者グループ「Admin」が存在します。
Adminは全ての画面・機能へのアクセス権限を持ち、それを修正することは出来ません。
しかしながら、開発時DBの差し替え、aodファイルによる定義差し替え等によって
Adminの権限が外れてしまう場合があります。
その状態を修正しようにも「Adminは全ての権限を持っている、かつ、修正する必要はない」
の要件が邪魔をして修正できません。
その際の対処方法を提示します。
Adminグループの権限を確認する方法   Administration &amp;gt; Ad,omostratopm Area の
Setupセクション User group permissions を起動。
  **Admin **を選択している状態で **Permissions **タブを選択
  全て、Full control になっていることを確認する。
  Adminグループの権限を編集する方法   AOTから Forms &amp;gt; SysUserGroupSecurity.isAdminをEditする。
  **return true;　**をコメントアウトする。
  これで先程のUser group permissions 画面で編集出来るようになる。
  ソース例
#admin boolean isAdmin() { if (userGroupInfo.Id == #AdminUserGroup &amp;amp;&amp;amp; (domainInfo.Id == #AdminDomain || !useDomains)) { //return true; } return false; } </description>
    </item>
    
    <item>
      <title>[DynamicsAX2009]AIFファイル上限値とその解除</title>
      <link>/posts/2010/05/07/dynamicsax2009aif%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E4%B8%8A%E9%99%90%E5%80%A4%E3%81%A8%E3%81%9D%E3%81%AE%E8%A7%A3%E9%99%A4/</link>
      <pubDate>Fri, 07 May 2010 18:07:00 +0900</pubDate>
      
      <guid>/posts/2010/05/07/dynamicsax2009aif%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E4%B8%8A%E9%99%90%E5%80%A4%E3%81%A8%E3%81%9D%E3%81%AE%E8%A7%A3%E9%99%A4/</guid>
      <description>デフォルト上限値の設定とエラー内容 DynamicsAXのAIFは外部ファイルとのやり取りを行うインターフェースの一つです。
外部ファイルとのやり取り時、明示されてはいませんがファイルサイズの上限値があります。
デフォルトでは10MBに設定されています。
これを超えるファイルのやり取りをAIFで行おうとすると下記エラーがイベントログに出力されます。
 The adapter is unable to send the following message to Microsoft Dynamics AX:
MessageId: XXXXXXXX-1111-AAAA-9999-ZZZZZZZZZZZZ
Error: Error executing code: Insufficient memory to run script.
Error executing code: object not initialized.
(C)\Classes\\processRequest
-&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-
Product Version : 5.0
Assembly Version : 5.0.0.0
Class : AppEventLog
Method : WriteLocalizedError
Subsystem : BizTalkDynamicsAdapter
-&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-
For more information, see Help and Support Center at http://go.microsoft.com/fwlink/events.asp.
 上限設定変更もしくは解除方法 レジストリを編集することで解除 or 上限値変更が出来ます。</description>
    </item>
    
    <item>
      <title>[DynamicsAX2009]DocumentServiceClassのアップデート</title>
      <link>/posts/2010/03/19/dynamicsax2009documentserviceclass%E3%81%AE%E3%82%A2%E3%83%83%E3%83%97%E3%83%87%E3%83%BC%E3%83%88/</link>
      <pubDate>Fri, 19 Mar 2010 02:33:00 +0900</pubDate>
      
      <guid>/posts/2010/03/19/dynamicsax2009documentserviceclass%E3%81%AE%E3%82%A2%E3%83%83%E3%83%97%E3%83%87%E3%83%BC%E3%83%88/</guid>
      <description>AIFサービスのベースになっているテーブルの定義変更をした場合に
DocumentServiceClassのアップデートを行わなければならない。
Query復元 AOTのQueryオブジェクト上で **Restore **を実行
Document Service の更新 AxClass より parm Method と set Method を消去する   AxClassをAOT上で表示し、フィールド一覧を展開し、表示する。
  変更フィールド名称が含まれている parm Method を消去する。
  変更フィールド名称が含まれている set Method を消去する。
例）
Fooテーブルの Barフィールドに変更を加えたのなら、
AxFoo ClassのparmBarメソッドを消去し、
setBarメソッドを消去する。
  Update document serviceを実行する   Tool &amp;gt; Development tools &amp;gt; Application Integration Framework &amp;gt; Update document service を起動する。
  Service class name で サービス名を選択する。
  変更内容がフィールドの削除だった場合は
Regenerate data object classes にのみチェックを入れる。</description>
    </item>
    
    <item>
      <title>[DynamicsAX2009]AXのTableとDBを復旧させるための6つの事</title>
      <link>/posts/2010/03/08/dynamicsax2009ax%E3%81%AEtable%E3%81%A8db%E3%82%92%E5%BE%A9%E6%97%A7%E3%81%95%E3%81%9B%E3%82%8B%E3%81%9F%E3%82%81%E3%81%AE6%E3%81%A4%E3%81%AE%E4%BA%8B/</link>
      <pubDate>Mon, 08 Mar 2010 00:23:00 +0900</pubDate>
      
      <guid>/posts/2010/03/08/dynamicsax2009ax%E3%81%AEtable%E3%81%A8db%E3%82%92%E5%BE%A9%E6%97%A7%E3%81%95%E3%81%9B%E3%82%8B%E3%81%9F%E3%82%81%E3%81%AE6%E3%81%A4%E3%81%AE%E4%BA%8B/</guid>
      <description>DynamicsAXで開発をしていたり、
AOTからDBをいじりまくってたりするとよくTable周りでエラーが出る。
その場合にやるべき6つのことを書いておく。
 DynamicsAXにログインしている人たちを全員ログアウトさせる。 Compile Synchronize Index再作成 クライアントキャッシュファイル削除 Usage Data削除  DynamicsAXにログインしている人たちを全員ログアウトさせる。 これからやる作業は、やっている間にAXが操作されないほうがよいのでログアウトしてもらう。
Compile AOTのルートで右クリックコンテキストメニューを出し、**Compile **を実行する。
ここでエラーが出たものは基本的に修正したほうがよいが、X++はインタプリタ言語なので現在エラーが出ている箇所以外のものは放置してもよい。
Synchronize Data Dictionaryで右クリックコンテキストメニューを出し、Synchronize を実行する。
これでAXとDBとの同期化される。
Compile &amp;amp; Synchronize である程度のDBとのアンマッチ等のErrorやWaringは除去される。
あなたがインフラ担当ならば、昼休みと帰る前にこの二点はやっておいて損はない。
Index再作成   AOSサービス停止
  Axapd.aoi ファイルを削除する。
(Axapd.aoiはデフォルトで C:\Program Files\Microsoft Dynamics AX\50\Application\Appl\DynamicsAx1 にある。)
  AOSサービス再開（もしくはWindows再起動）
  これで大抵のものは治るはず。
特にDBとAXのDataDictionaryのアンマッチ系はこれでほとんど治る。
それでも駄目なら・・・
クライアントキャッシュファイル削除   AXクライアントを終了
  クライアントキャッシュファイル(.auc)を削除
WindowsXPの場合:
C:\Documents and Setting\\Local Settings\Application Data
Windows2008の場合:
C:\Users\\AppData\Local
  Usage Data削除   AXクライアントを起動</description>
    </item>
    
    <item>
      <title>[DynamicsAX2009][X&#43;&#43;]安全なクラスキャストとシステム日付</title>
      <link>/posts/2010/02/11/dynamicsax2009x-%E5%AE%89%E5%85%A8%E3%81%AA%E3%82%AF%E3%83%A9%E3%82%B9%E3%82%AD%E3%83%A3%E3%82%B9%E3%83%88%E3%81%A8%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E6%97%A5%E4%BB%98/</link>
      <pubDate>Thu, 11 Feb 2010 14:02:00 +0900</pubDate>
      
      <guid>/posts/2010/02/11/dynamicsax2009x-%E5%AE%89%E5%85%A8%E3%81%AA%E3%82%AF%E3%83%A9%E3%82%B9%E3%82%AD%E3%83%A3%E3%82%B9%E3%83%88%E3%81%A8%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E6%97%A5%E4%BB%98/</guid>
      <description>X++の小技を自分メモ用に紹介。
X++に対してgoogle-code-prettifyがうまく動作するか不安だがやってみる。
 安全なクラスキャスト システム日付  安全なクラスキャスト static pulic void main(Args \_args) { binaryIO b; textIO t; ; b = SysDictClass::as(t,classIdGet(b)); } ちなみにObjectを使用して安全でないクラスキャストもできる。
static pulic void main(Args \_args) { binaryIO b; textIO t; Object o; ; o = t; b = o; } システム日付 utcDateTime型とDate型で取得
void method1() { utcDateTime utc; Date d; ; utc = DateTimeUtil::applyTimeZoneOffset( DateTimeUtil::getSystemDateTime(), DateTimeUtil::getUserPreferredTimeZone() ); d = DateTimeUtil::date(utc); print utc; print d; } 実行結果
 2010/12/12 12:12:12</description>
    </item>
    
    <item>
      <title>[DynamicsAX2009]AIFの実行環境設定</title>
      <link>/posts/2010/01/21/dynamicsax2009aif%E3%81%AE%E5%AE%9F%E8%A1%8C%E7%92%B0%E5%A2%83%E8%A8%AD%E5%AE%9A/</link>
      <pubDate>Thu, 21 Jan 2010 00:49:00 +0900</pubDate>
      
      <guid>/posts/2010/01/21/dynamicsax2009aif%E3%81%AE%E5%AE%9F%E8%A1%8C%E7%92%B0%E5%A2%83%E8%A8%AD%E5%AE%9A/</guid>
      <description>AIFの実行環境設定 AXのBasicメニューより以下を設定する。
 AIFの実行環境設定  Local endpoints設定 Transport adapters設定 Channels設定  File System Adapter BizTalk Adapter   Endpoints設定  Data policies設定 Endpoint有効化      Local endpoints設定 会社毎にLocal endpointsを設定する。
Local endpointsはI/Oを許可した会社の別名と考えれられる。
Newボタンを押し以下項目を設定する。
Company セレクトボックスより設定したい会社名
Local endpoint
任意の名前
Transport adapters設定 どのアダプターを使用するかを決定する。
通常はFile System Adapterを使用するが、
BizTalk Adapter等の特殊な設定も存在する。
Adapter class
セレクトボックスより設定したいAdapterClass名称を選択。
Name
Adapter classより自動設定される。
Active
チェックを入れる。
Direction
Adapter classより自動設定される。
Channels設定 AIFで使用するXMLファイルのI/Oの場所設定を行う。
File System Adapter Outboundを作成してから、Inbound作成すること
そうしなければResponse channelの設定で少しつまる。
Response channelの設定は、
Inboundの場合は対応するOutboundを、</description>
    </item>
    
    <item>
      <title>[DynamicsAX2009]X&#43;&#43;でよく使う型とそのスコープのまとめ</title>
      <link>/posts/2010/01/16/dynamicsax2009x-%E3%81%A7%E3%82%88%E3%81%8F%E4%BD%BF%E3%81%86%E5%9E%8B%E3%81%A8%E3%81%9D%E3%81%AE%E3%82%B9%E3%82%B3%E3%83%BC%E3%83%97%E3%81%AE%E3%81%BE%E3%81%A8%E3%82%81/</link>
      <pubDate>Sat, 16 Jan 2010 16:45:00 +0900</pubDate>
      
      <guid>/posts/2010/01/16/dynamicsax2009x-%E3%81%A7%E3%82%88%E3%81%8F%E4%BD%BF%E3%81%86%E5%9E%8B%E3%81%A8%E3%81%9D%E3%81%AE%E3%82%B9%E3%82%B3%E3%83%BC%E3%83%97%E3%81%AE%E3%81%BE%E3%81%A8%E3%82%81/</guid>
      <description>X++でよく使う型とそのスコープのまとめ 時々質問が飛んでくるので、メモ。
標準的な型 型
スコープ
Deault
int
-2,147,483,648 ～ 2,147,483,647
0
int64
-9,223,372,036,854,775,808 ～ 9,223,372,036,854,775,808
0
real
]-(10)127～(10)127 [, 16桁の精度を守りつつ。
0.00
String
Unlimited
&amp;quot;&amp;quot;
TimeOfDay
0～86400(32bit)
0
date
1/1/1900 ～ 31/12/2154
1/1/1900
utcdatetime
1900-01-01T00:00:00 ～ 2154-12-31T23:59:59
この値の最小と最大がtimeOfDay型とdate型でも最小最大である。
1900-01-01T00:00:00
realはBCD-encoding: 64 bitとあるので (※BCD=binary coded decimals=二進化十進数)
16桁の精度を持ったDecimal型である。
Boolean 表示
Bool値
1
True
0
False
true
True
false
False
44
True
Default : false
X++データ型とXSD型のマッピング
ついでにAIF使ってたらよく出てくるのでXSD型とのマッピングも書いておく。
X++データ型
XSD型
String
xsd:string,maxLength=StringSize
Integer
xsd:time , ISO format:HH:MM:SS</description>
    </item>
    
    <item>
      <title>[DynamicsAX2009]DynamicsAXの用語整理</title>
      <link>/posts/2010/01/14/dynamicsax2009dynamicsax%E3%81%AE%E7%94%A8%E8%AA%9E%E6%95%B4%E7%90%86/</link>
      <pubDate>Thu, 14 Jan 2010 12:58:00 +0900</pubDate>
      
      <guid>/posts/2010/01/14/dynamicsax2009dynamicsax%E3%81%AE%E7%94%A8%E8%AA%9E%E6%95%B4%E7%90%86/</guid>
      <description>Dynamics AXのお仕事の最初の頃の、
皆がAXって何よ？って感じだったころ、
打ち合わせの会話は適度にカオスっていた。
「Axapterで作るんだよね？」
「え？**X++**で実装するんじゃないの？」
「え？え？MorphXって名前じゃなかったっけ？」
「AIFでやらなきゃいけないとか聞いたけど？」
「ところでAXって何？」
うーん、燃え上がる雰囲気が漂っていますね。
楽しそう。
で、以下整理整頓
Dynamics AX 元の製品名はAxapter。
Dynamics製品群はMicrosfot社が持っているERPとCRMの製品群のことで、
Dynamics AXはその中にある4本のERPパッケージのうちのひとつ。
ちなみに2バイト文字に対応しているのはDynamics AXとDynamics NAVだけ。
Dynamics NAV 元の製品名はNavision。
AXとNAVは両方ともERPパッケージであるが、差異は以下の通り。
AX
NAV
対象企業
50億〜500億円の企業
（中堅規模以上）
数十億〜200億円
（中小・中堅企業）
導入要件
独自要件あり
シンプルに
NAVは日本でも導入が行われていたらしいが、
AXに関してはほぼゼロ。
ただ、欧州では活発に使われている製品らしいです。
ちなみに今回のお仕事も海外への導入でした。
Axapter 昔のAXの名前。
Damgaard社が作成。
この会社が2002年MSに買収され、
製品名がAxapterからDynamics AXに変更された。
MorphX AXにくっついてくる拡張機能実装用IDE
X++ MorphXでコーディングをする際に使われる言語。
C言語のようなC++のような。
C#のようなどっちつかずなインタプリタ言語。
C言語の遺物マクロが跋扈しているので注意が必要。
ガベコレありなので、慣れれば生産性はそこそこ。
なんでX?ってのは、元々Axapter時代に使われていた拡張用言語がXALだったからとか
（Dynamics AX 4.0 開発ガイドの前書きより）
AIF Appication Integration Framework : アプリケーション統合フレームワーク
Dynamics AXが他のアプリケーションとやりとりをするためのサービス群
インターフェースにはXMLドキュメントを使用する。</description>
    </item>
    
  </channel>
</rss>
